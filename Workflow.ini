[ ICAM-540 ] → [ MQTT / HTTP Post ]
                    ↓
                [ AWS IoT Core ]


                ===================以上給上蒼
                    ↓
               [ AWS Lambda ]
                    ↓
       
             ┌───────────────┐
             │ AWS S3（影像）│
             └───────────────┘
                    ↓
         ┌──────────────────────┐
         │ AWS Rekognition 分析人數 │
         └──────────────────────┘
                    ↓

        [ AWS Timestream or DynamoDB ]
        
                    ↓
        [ Bedrock (or OpenAI) 生成報告 ]
                    ↓ 
             ┌────────────┐
             │ SNS / Email│
             └────────────┘
                    ↓
                [ 前端 Dashboard ]

🧩 五大模組分拆規劃
✅ 模組一：影像上傳與存取（Image Capture + S3）
📌 目標： ICAM-540 或模擬器能定時上傳影像到 AWS S3，並成功儲存到指定資料夾。

🔧 包含內容：

模擬器（Python/Node.js）或實體 ICAM 發 HTTP POST 上傳圖片

Lambda 監聽 S3:ObjectCreated 事件並 log 檔名＋時間

S3 bucket 命名規則（例如：icam-images/yyyy-mm-dd/roomA-1200.jpg）

📎 單獨驗證方式：

成功從 local 上傳一張圖到 S3

S3 上圖片正確可預覽、命名無誤

Lambda log 有紀錄上傳事件

✅ 模組二：人數辨識分析（Rekognition 分析人數）
📌 目標： 讀取任一張圖片，成功呼叫 AWS Rekognition 並判斷圖片中「人」的數量。

🔧 包含內容：

Lambda / 本地程式從 S3 讀取圖檔

使用 detectLabels 或 detectFaces API

回傳人數資料（如：{count: 3}）

📎 單獨驗證方式：

拿幾張含有 0～5 人的照片

呼叫 Rekognition 並確認 Label 準確度

顯示人數數值在 log 或前端

✅ 模組三：時間序列資料寫入與查詢（Timestream 存取）
📌 目標： 把每次偵測到的人數存進 AWS Timestream 並能正確查詢一段時間內的人數變化。

🔧 包含內容：

Lambda 將時間、人數、房間存入 Timestream

撰寫 SQL 查詢近 7 天統計資料

可用 CLI / SDK 驗證查詢結果

📎 單獨驗證方式：

插入一筆手動資料 {room: A, count: 2, timestamp: now()}

成功查詢並顯示在 console 或網頁上

✅ 模組四：AI 報告產生器（Bedrock / OpenAI）
📌 目標： 接收一段數據摘要，透過生成式 AI 產出報告（如：「本週使用高峰在週三，建議…」）

🔧 包含內容：

Lambda 或本地程式構造 prompt

呼叫 Bedrock（如 Claude）或 OpenAI

回傳文字摘要並存到 S3 / 顯示

📎 單獨驗證方式：

傳入範例：

text
複製
編輯
週一平均 3 人、週二 1 人、週三高峰 5 人…
AI 回傳自然語言報告 ✅

儲存成 report-202504-week4.txt 到 S3 ✅

✅ 模組五：前端顯示介面（React Dashboard）
📌 目標： 簡易網頁能看到：

時間對應的人數折線圖

最新 AI 生成報告

歷史報告下載

登入驗證（選配）

🔧 包含內容：

React + Chart.js 繪圖

AWS SDK 讀取 S3 報告與 Timestream 查詢資料

可選用 Cognito 加入簡單登入

📎 單獨驗證方式：

前端能成功 fetch API / 模擬資料並呈現

折線圖資料顯示正確

按鈕下載報告 OK